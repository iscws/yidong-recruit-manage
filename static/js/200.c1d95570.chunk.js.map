{"version":3,"file":"static/js/200.c1d95570.chunk.js","mappings":"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","sources":["components/layout-interview/style.ts","components/layout-interview/index.tsx","service/config/config.ts","service/request/request.ts","service/index.ts","service/api.ts"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const InterviewWrapper = styled.div`\r\n  .btnbox::after {\r\n    display: table;\r\n    clear: both;\r\n    content: '';\r\n  }\r\n  .next-btn {\r\n    margin: 10px 10px 10px 0;\r\n    width: 100px;\r\n    float: right;\r\n  }\r\n  .header {\r\n    width: 100%;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    background-color: #968f8f;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: #ffffff;\r\n    text-align: center;\r\n    margin: 10px 0;\r\n    user-select: none;\r\n    border-radius: 5px;\r\n  }\r\n`;\r\n","import React, { memo, useCallback, useEffect, useState } from 'react';\nimport type { FC, ReactNode } from 'react';\nimport { userEnrollType } from '@/type';\nimport { InterviewWrapper } from './style';\nimport { useNavigate } from 'react-router-dom';\nimport { getInterviewTime } from '@/service/api';\nimport { Table, Button, Select } from 'antd';\n// import { ColumnsType } from 'antd/es/table';\nimport Mock from 'mockjs';\n\ninterface LayoutInterProps {\n  children?: ReactNode;\n}\n\nconst LayoutInter: FC<LayoutInterProps> = () => {\n  const navigate = useNavigate();\n  // const params = useParams();\n  const [interviewList, setInterviewList] = useState<userEnrollType[]>([]);\n  // const [interviewing, setinterviewing] = useState<userEnrollType[]>([]);\n  // 获取面试数据\n  useEffect(() => {\n    getInterviewTime().then((res) => {\n      console.log(res);\n    });\n    // const columns: ColumnsType<userEnrollType> = [\n    //   {\n    //     title: '名字',\n    //     dataIndex: 'username',\n    //     key: 'username',\n    //     filterMode: 'tree'\n    //   },\n    //   {\n    //     title: '性别',\n    //     key: 'sex',\n    //     dataIndex: 'sex'\n    //   },\n    //   {\n    //     title: '学号',\n    //     key: 'studentId',\n    //     dataIndex: 'studentId'\n    //   },\n    //   {\n    //     title: '手机号码',\n    //     key: 'phone',\n    //     dataIndex: 'phone'\n    //   },\n    //   {\n    //     title: '学院',\n    //     key: 'college',\n    //     dataIndex: 'college'\n    //   },\n    //   {\n    //     title: '专业',\n    //     key: 'major',\n    //     dataIndex: 'major'\n    //   },\n    //   {\n    //     title: '状态',\n    //     key: 'status',\n    //     dataIndex: 'status'\n    //   },\n    //   {\n    //     title: '进入详情',\n    //     key: 'index',\n    //     render: (record: userEnrollType) => {\n    //       return (\n    //         <Button onClick={() => toUserDetail(record)} type=\"primary\">\n    //           进入详情\n    //         </Button>\n    //       );\n    //     }\n    //   }\n    // ];\n    const mock = Mock.mock({\n      'data|20': [\n        {\n          id: '@natural(1,20)',\n          username: '@cname',\n          'sex|1-2': 1,\n          studentId: '@ID',\n          phone: '@integer',\n          college: '@ctitle',\n          major: '@cword(2,8)',\n          introduction: '@cparagraph',\n          status: '@ctitle',\n          interviewTime: '@ctitle',\n          assess: '@boolean'\n        }\n      ]\n    });\n    setInterviewList(mock.data);\n  }, []);\n\n  // 进入用户详情页\n  const toUserDetail = useCallback((record: userEnrollType) => {\n    navigate(`/detail/${record.id}`);\n  }, []);\n  const handleChange = (value: string) => {\n    console.log(`selected ${value}`);\n  };\n  return (\n    <InterviewWrapper>\n      <div className=\"select-time\">\n        <div>选择日期：</div>\n        <Select\n          defaultActiveFirstOption\n          style={{ width: 240 }}\n          onChange={handleChange}\n          options={[\n            { value: 1, label: '2023-04-03' },\n            { value: 2, label: '2023-04-10' },\n            { value: 3, label: '2023-04-11' },\n            { value: 4, label: '2023-04-12' }\n          ]}\n        />\n      </div>\n      <div className=\"header\">正在面试 Interviewing</div>\n      <Table\n        pagination={false}\n        dataSource={[interviewList[0]]}\n        rowKey=\"studentId\"\n        onRow={(record) => {\n          return {\n            onDoubleClick: () => {\n              console.log('record:', record);\n              toUserDetail(record);\n            }\n          };\n        }}\n      />\n      <div className=\"btnbox\">\n        <Button size=\"large\" className=\"next-btn\" type=\"primary\">\n          下一位\n        </Button>\n      </div>\n\n      <div className=\"header\">待面试队列 Waiting</div>\n      <Table\n        dataSource={interviewList}\n        rowKey=\"studentId\"\n        onRow={(record) => {\n          return {\n            onDoubleClick: () => {\n              console.log('record:', record);\n              toUserDetail(record);\n            }\n          };\n        }}\n      />\n    </InterviewWrapper>\n  );\n};\n\nexport default memo(LayoutInter);\n","export const BASE_URL = 'https://www.yidongmall.cn';\r\n\r\nexport const TIME_OUT = 10000;\r\n","import axios, { AxiosResponse, InternalAxiosRequestConfig } from 'axios';\nimport type { AxiosInstance, AxiosRequestConfig } from 'axios';\nimport type { eAxiosResponse } from './type';\nimport { refleshToken } from '../api';\nimport { TokenFunc } from '@/type';\n\n// 是否正在刷新的标记\nlet isRefreshing = false;\n// 重试队列，每一项将是一个待执行的函数形式\nlet requests: TokenFunc[] = [];\n\nclass Request {\n  // axios 实例\n  instance: AxiosInstance;\n\n  constructor(config: AxiosRequestConfig) {\n    this.instance = axios.create(config);\n    this.instance.interceptors.request.use(\n      (config: InternalAxiosRequestConfig) => {\n        if (localStorage.getItem('token') !== null) {\n          const token = localStorage.getItem('token') as string;\n          config.headers['token'] = `${token}`;\n        } else {\n          console.log('删除 token 了');\n          delete config.headers['Authorization'];\n        }\n        return config;\n      },\n      (err: AxiosResponse) => {\n        return err;\n      }\n    );\n\n    this.instance.interceptors.response.use(\n      (response) => {\n        // 获取code值\n        const { code, message } = response.data;\n        // 执行无痛刷新token\n        if (code === 500 && message === 'token无效!请重新登录!') {\n          const config = response.config;\n          if (!isRefreshing) {\n            isRefreshing = true;\n            return refleshToken()\n              .then((res) => {\n                const { data: token } = res;\n                // 设置token\n                localStorage.setItem('token', token);\n                console.log('token设置完毕');\n                config.headers['token'] = token;\n\n                // 已经刷新了token,将队列里的请求进行重试\n                requests.forEach((item) => item(token));\n                // 将重试队列置空\n                requests = [];\n                return this.instance.request(config);\n              })\n              .catch((res) => {\n                // 如果刷新token无效则直接回到登录页面\n                console.log('reflashtoken error = >', res);\n                window.location.href = '/Login';\n              })\n              .finally(() => {\n                isRefreshing = false;\n              });\n          } else {\n            // 此时代表正在刷新token,返回一个未执行resolve的promise\n            return new Promise((resolve) => {\n              requests.push((token) => {\n                config.headers['token'] = token;\n                // 发送请求\n                resolve(this.instance.request(config));\n              });\n            });\n          }\n        }\n        return response.data;\n      },\n      (err) => {\n        return Promise.reject(err);\n      }\n    );\n  }\n\n  request<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.instance.request<any, T>(config);\n  }\n  get<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'GET' });\n  }\n  post<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'POST' });\n  }\n  delete<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'DELETE' });\n  }\n}\n\nexport default Request;\n","import { BASE_URL, TIME_OUT } from './config/config';\r\nimport Request from './request/request';\r\n\r\nconst request = new Request({\r\n  baseURL: BASE_URL,\r\n  timeout: TIME_OUT\r\n});\r\n\r\nexport default request;\r\n","import { interviewTime, LoginProps, searchUserType } from '@/type';\r\nimport request from '.';\r\n\r\nexport function login(props: LoginProps) {\r\n  return request.post({\r\n    url: '/api/admin/login/pw',\r\n    params: props\r\n  });\r\n}\r\n\r\n// 获取报名情况\r\nexport function getEnrollData(direction: string) {\r\n  return request.get({\r\n    url: `/api/admin/orderBy/${direction}`\r\n  });\r\n}\r\n\r\nexport function getSearchData(params: searchUserType) {\r\n  return request.get({\r\n    url: `/api/admin/getUserInfoByName?username=${params.username}`\r\n  });\r\n}\r\n\r\n// 获取面试时间\r\nexport function getInterviewTime() {\r\n  return request.get({\r\n    url: '/api/admin/getAllTime'\r\n  });\r\n}\r\n// 根据方向获取面试时间\r\nexport function getInterviewTimeDirec(direction: number) {\r\n  return request.get({\r\n    url: `/api/admin/getAllTimeByDir/${direction}`\r\n  });\r\n}\r\n\r\nexport async function refreshToken() {\r\n  const username = window.localStorage.getItem('username') as string;\r\n  const password = window.localStorage.getItem('password') as string;\r\n\r\n  return login({ username, password }).then((res) => {\r\n    return res.data;\r\n  });\r\n}\r\n\r\n// 更改面试基本信息\r\nexport function updateInterviewInfo(props: interviewTime) {\r\n  return request.post({\r\n    url: '/api/admin/updateTime',\r\n    data: props\r\n  });\r\n}\r\n\r\n// 新增面试时间\r\nexport function addNewInterview(props: interviewTime) {\r\n  return request.post({\r\n    url: '/api/admin/addTime',\r\n    data: props\r\n  });\r\n}\r\n\r\n// 删除面试时间\r\nexport function deleteInterviewTime(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/deleteTime/${id}`\r\n  });\r\n}\r\n\r\n// 获取某个用户的基本信息\r\nexport function getUserInfoById(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/getUserInfoById`,\r\n    params: { id }\r\n  });\r\n}\r\n\r\nexport function refleshToken() {\r\n  const username = localStorage.getItem('username');\r\n  const password = localStorage.getItem('password');\r\n\r\n  return request.post({\r\n    url: '/api/admin/login/pw',\r\n    params: {\r\n      username,\r\n      password\r\n    }\r\n  });\r\n}\r\n\r\n// 查询当前面试时间是否有被预约`\r\nexport function getAppointSec(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/ifSec/${id}`\r\n  });\r\n}\r\n\r\n// 查询多少分钟之前能预约\r\nexport function getPreRecruitTime() {\r\n  return request.get({\r\n    url: `/api/admin/getPreRecruitTime`\r\n  });\r\n}\r\n"],"names":["InterviewWrapper","styled","_templateObject","_taggedTemplateLiteral","LayoutInter","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","interviewList","setInterviewList","useEffect","getInterviewTime","then","res","console","log","mock","Mock","id","username","studentId","phone","college","major","introduction","status","interviewTime","assess","data","toUserDetail","useCallback","record","concat","_jsxs","children","className","_jsx","Select","defaultActiveFirstOption","style","width","onChange","value","options","label","Table","pagination","dataSource","rowKey","onRow","onDoubleClick","Button","size","type","memo","isRefreshing","requests","Request","config","_this","_classCallCheck","instance","this","axios","interceptors","request","use","localStorage","getItem","token","headers","err","response","_response$data","code","message","Promise","resolve","push","refleshToken","setItem","forEach","item","catch","window","location","href","finally","reject","_createClass","key","_objectSpread","method","baseURL","timeout","login","props","url","params","getEnrollData","direction","getSearchData","getInterviewTimeDirec","updateInterviewInfo","addNewInterview","deleteInterviewTime","getUserInfoById","password","getAppointSec","getPreRecruitTime"],"sourceRoot":""}