{"version":3,"file":"static/js/200.7de28cb4.chunk.js","mappings":"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","sources":["components/home-table/index.tsx","components/layout-interview/style.ts","components/layout-interview/index.tsx","service/config/config.ts","service/request/request.ts","service/index.ts","service/api.ts","utils/index.ts"],"sourcesContent":["import React, { memo, useCallback } from 'react';\r\nimport type { FC, ReactNode } from 'react';\r\nimport { userEnrollType } from '@/type';\r\nimport { Table, Button } from 'antd';\r\nimport { ColumnsType } from 'antd/es/table';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n  children?: ReactNode;\r\n  infoData: userEnrollType[];\r\n  showHeader?: boolean;\r\n}\r\n\r\nconst HomeTable: FC<IProps> = (props) => {\r\n  const navigate = useNavigate();\r\n  const showHeader = props.showHeader ?? true;\r\n  // 进入用户详情页\r\n  const toUserDetail = useCallback((record: userEnrollType) => {\r\n    navigate(`/detail/${record.id}`);\r\n  }, []);\r\n  const columns: ColumnsType<userEnrollType> = [\r\n    {\r\n      title: '名字',\r\n      dataIndex: 'username',\r\n      key: 'username',\r\n      filterMode: 'tree'\r\n    },\r\n    {\r\n      title: '性别',\r\n      key: 'sex',\r\n      dataIndex: 'sex'\r\n    },\r\n    {\r\n      title: '学号',\r\n      key: 'studentId',\r\n      dataIndex: 'studentId'\r\n    },\r\n    {\r\n      title: '手机号码',\r\n      key: 'phone',\r\n      dataIndex: 'phone'\r\n    },\r\n    {\r\n      title: '学院',\r\n      key: 'college',\r\n      dataIndex: 'college'\r\n    },\r\n    {\r\n      title: '专业',\r\n      key: 'major',\r\n      dataIndex: 'major'\r\n    },\r\n    {\r\n      title: '状态',\r\n      key: 'status',\r\n      dataIndex: 'status'\r\n    },\r\n    {\r\n      title: '进入详情',\r\n      key: 'index',\r\n      render: (record: userEnrollType) => {\r\n        return (\r\n          <Button onClick={() => toUserDetail(record)} type=\"primary\">\r\n            进入详情\r\n          </Button>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n  return (\r\n    <>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={props.infoData}\r\n        rowKey=\"id\"\r\n        showHeader={showHeader}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(HomeTable);\r\n","import styled from 'styled-components';\r\n\r\nexport const InterviewWrapper = styled.div`\r\n  .btnbox::after {\r\n    display: table;\r\n    clear: both;\r\n    content: '';\r\n  }\r\n  .next-btn {\r\n    margin: 10px 10px 10px 0;\r\n    width: 100px;\r\n    float: right;\r\n  }\r\n  .header {\r\n    width: 100%;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    background-color: #968f8f;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: #ffffff;\r\n    text-align: center;\r\n    margin: 10px 0;\r\n    user-select: none;\r\n    border-radius: 5px;\r\n  }\r\n`;\r\n","import React, { memo, useEffect, useState } from 'react';\nimport type { FC, ReactNode } from 'react';\nimport { interviewTime, userEnrollType } from '@/type';\nimport { InterviewWrapper } from './style';\nimport { useParams } from 'react-router-dom';\nimport {\n  getInterviewTimeDirec,\n  getRecruitTimeInfo,\n  getTodayInfo\n} from '@/service/api';\nimport { Button, Select } from 'antd';\nimport HomeTable from '../home-table';\nimport { formatDate } from '@/utils';\n// import { ColumnsType } from 'antd/es/table';\n\ninterface LayoutInterProps {\n  children?: ReactNode;\n}\ninterface item {\n  id: number;\n  date: string;\n}\n\nconst LayoutInter: FC<LayoutInterProps> = () => {\n  const params = useParams();\n  const [dateList, setDateList] = useState<item[]>([]);\n  const [currId, setCurrId] = useState<number | undefined>(undefined);\n  const [queueList, setQueueList] = useState<userEnrollType[]>([]);\n  const [isInterview] = useState<userEnrollType[]>([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      let innerCurrId = -1;\n      let innerQuene = [];\n      let innerTimeList: item[] = [];\n      // 获取今天日期\n      const todayInfo = await getTodayInfo(Number(params.direction)).then(\n        (res) => {\n          console.log(res);\n\n          return res.data;\n        }\n      );\n      console.log(todayInfo);\n      // 将当天数据传入队列当中\n      if (todayInfo !== null && todayInfo.info !== null) {\n        innerQuene = todayInfo.info;\n      } else {\n        innerTimeList.push({\n          id: -1,\n          date: formatDate(new Date())\n        });\n      }\n\n      // 和数组内的元素进行筛选，如果有重合的部分则直接展示\n      await getInterviewTimeDirec(Number(params.direction)).then((res) => {\n        const listData = res.data as interviewTime[];\n        const list = listData.map((item) => {\n          const date = item.startTime;\n          if (todayInfo !== null && todayInfo.id === item.id) {\n            innerCurrId = item.id as number;\n          }\n          return { id: item.id as number, date: date };\n        });\n        innerTimeList = [...list, ...innerTimeList];\n      });\n\n      setQueueList(innerQuene);\n      setDateList(innerTimeList);\n      setCurrId(innerCurrId);\n    }\n    fetchData();\n  }, [params]);\n\n  const handleChange = (value: number) => {\n    console.log(`selected ${value}`);\n    getRecruitTimeInfo(value).then(({ code, data }) => {\n      console.log(data);\n\n      if (code === 200) {\n        setQueueList(data.info);\n      } else {\n        setQueueList([]);\n      }\n    });\n  };\n  return (\n    <InterviewWrapper>\n      <div className=\"select-time\">\n        <div>选择日期：</div>\n        {currId !== undefined && (\n          <Select\n            defaultValue={currId}\n            defaultActiveFirstOption\n            style={{ width: 240 }}\n            onChange={handleChange}\n            fieldNames={{\n              label: 'date',\n              value: 'id'\n            }}\n            options={dateList}\n          />\n        )}\n      </div>\n      <div className=\"header\">正在面试 Interviewing</div>\n      <HomeTable infoData={isInterview} showHeader={false} />\n      <div className=\"btnbox\">\n        <Button size=\"large\" className=\"next-btn\" type=\"primary\">\n          下一位\n        </Button>\n      </div>\n\n      <div className=\"header\">待面试队列 Waiting</div>\n      <HomeTable infoData={queueList} showHeader={false} />\n    </InterviewWrapper>\n  );\n};\n\nexport default memo(LayoutInter);\n","export const BASE_URL = 'https://www.yidongmall.cn';\r\n\r\nexport const TIME_OUT = 10000;\r\n","import axios, { AxiosResponse, InternalAxiosRequestConfig } from 'axios';\nimport type { AxiosInstance, AxiosRequestConfig } from 'axios';\nimport type { eAxiosResponse } from './type';\nimport { refleshToken } from '../api';\nimport { TokenFunc } from '@/type';\n\n// 是否正在刷新的标记\nlet isRefreshing = false;\n// 重试队列，每一项将是一个待执行的函数形式\nlet requests: TokenFunc[] = [];\n\nclass Request {\n  // axios 实例\n  instance: AxiosInstance;\n\n  constructor(config: AxiosRequestConfig) {\n    this.instance = axios.create(config);\n    this.instance.interceptors.request.use(\n      (config: InternalAxiosRequestConfig) => {\n        if (localStorage.getItem('token') !== null) {\n          const token = localStorage.getItem('token') as string;\n          config.headers['token'] = `${token}`;\n        } else {\n          console.log('删除 token 了');\n          delete config.headers['Authorization'];\n        }\n        return config;\n      },\n      (err: AxiosResponse) => {\n        return err;\n      }\n    );\n\n    this.instance.interceptors.response.use(\n      (response) => {\n        // 获取code值\n        const { code, message } = response.data;\n        // 执行无痛刷新token\n        if (code === 500 && message === 'token无效!请重新登录!') {\n          const config = response.config;\n          if (!isRefreshing) {\n            isRefreshing = true;\n            return refleshToken()\n              .then((res) => {\n                const { data: token } = res;\n                // 设置token\n                localStorage.setItem('token', token);\n                console.log('token设置完毕');\n                config.headers['token'] = token;\n\n                // 已经刷新了token,将队列里的请求进行重试\n                requests.forEach((item) => item(token));\n                // 将重试队列置空\n                requests = [];\n                return this.instance.request(config);\n              })\n              .catch((res) => {\n                // 如果刷新token无效则直接回到登录页面\n                console.log('reflashtoken error = >', res);\n                window.location.href = '/Login';\n              })\n              .finally(() => {\n                isRefreshing = false;\n              });\n          } else {\n            // 此时代表正在刷新token,返回一个未执行resolve的promise\n            return new Promise((resolve) => {\n              requests.push((token) => {\n                config.headers['token'] = token;\n                // 发送请求\n                resolve(this.instance.request(config));\n              });\n            });\n          }\n        }\n        return response.data;\n      },\n      (err) => {\n        return Promise.reject(err);\n      }\n    );\n  }\n\n  request<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.instance.request<any, T>(config);\n  }\n  get<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'GET' });\n  }\n  post<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'POST' });\n  }\n  delete<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'DELETE' });\n  }\n}\n\nexport default Request;\n","import { BASE_URL, TIME_OUT } from './config/config';\r\nimport Request from './request/request';\r\n\r\nconst request = new Request({\r\n  baseURL: BASE_URL,\r\n  timeout: TIME_OUT\r\n});\r\n\r\nexport default request;\r\n","import { interviewTime, LoginProps, searchUserType } from '@/type';\r\nimport request from '.';\r\n\r\nexport function login(props: LoginProps) {\r\n  return request.post({\r\n    url: '/api/admin/login/pw',\r\n    params: props\r\n  });\r\n}\r\n\r\n// 获取报名情况\r\nexport function getEnrollData(direction: string) {\r\n  return request.get({\r\n    url: `/api/admin/orderBy/${direction}`\r\n  });\r\n}\r\n\r\nexport function getSearchData(params: searchUserType) {\r\n  return request.get({\r\n    url: `/api/admin/getUserInfoByName?username=${params.username}`\r\n  });\r\n}\r\n\r\n// 获取面试时间\r\nexport function getInterviewTime() {\r\n  return request.get({\r\n    url: '/api/admin/getAllTime'\r\n  });\r\n}\r\n// 根据方向获取面试时间\r\nexport function getInterviewTimeDirec(direction: number) {\r\n  return request.get({\r\n    url: `/api/admin/getAllTimeByDir/${direction}`\r\n  });\r\n}\r\n\r\nexport async function refreshToken() {\r\n  const username = window.localStorage.getItem('username') as string;\r\n  const password = window.localStorage.getItem('password') as string;\r\n\r\n  return login({ username, password }).then((res) => {\r\n    return res.data;\r\n  });\r\n}\r\n\r\n// 更改面试基本信息\r\nexport function updateInterviewInfo(props: interviewTime) {\r\n  return request.post({\r\n    url: '/api/admin/updateTime',\r\n    data: props\r\n  });\r\n}\r\n\r\n// 新增面试时间\r\nexport function addNewInterview(props: interviewTime) {\r\n  return request.post({\r\n    url: '/api/admin/addTime',\r\n    data: props\r\n  });\r\n}\r\n\r\n// 删除面试时间\r\nexport function deleteInterviewTime(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/deleteTime/${id}`\r\n  });\r\n}\r\n\r\n// 获取某个用户的基本信息\r\nexport function getUserInfoById(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/getUserInfoById`,\r\n    params: { id }\r\n  });\r\n}\r\n\r\nexport function refleshToken() {\r\n  const username = localStorage.getItem('username');\r\n  const password = localStorage.getItem('password');\r\n\r\n  return request.post({\r\n    url: '/api/admin/login/pw',\r\n    params: {\r\n      username,\r\n      password\r\n    }\r\n  });\r\n}\r\n\r\n// 查询当前面试时间是否有被预约`\r\nexport function getAppointSec(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/ifSec/${id}`\r\n  });\r\n}\r\n\r\n// 查询多少分钟之前能预约\r\nexport function getPreRecruitTime() {\r\n  return request.get({\r\n    url: `/api/admin/getPreRecruitTime`\r\n  });\r\n}\r\n\r\n// 更改多少分钟之前能预约\r\nexport function editPreRecruitTime(time: number) {\r\n  return request.get({\r\n    url: `/api/admin/changeRecruitTime/${time}`\r\n  });\r\n}\r\n\r\n// 获取该面试时间的信息\r\nexport function getRecruitTimeInfo(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/getThisTimeDelInfo/${id}`\r\n  });\r\n}\r\n// 获取当天面试时间\r\nexport function getTodayInfo(direction: number) {\r\n  return request.get({\r\n    url: `/api/admin/getThisDayTime/${direction}`\r\n  });\r\n}\r\n\r\n// 填写用户的评价\r\nexport function setUserAssess(id: number, assess: string) {\r\n  return request.get({\r\n    url: `/api/admin/setAssess/${id}`,\r\n    params: {\r\n      assess\r\n    }\r\n  });\r\n}\r\n","import { MenuItemType } from '@/type';\r\nimport React from 'react';\r\n\r\n// 截取字符串，并将其转为数字\r\nexport function substrNum(str: string): number {\r\n  return Number(str.slice(-1));\r\n}\r\n\r\n// 封装一下menuItem添加数据的方法\r\nexport function getItem(\r\n  label: React.ReactNode,\r\n  key: React.Key,\r\n  icon?: React.ReactNode,\r\n  children?: MenuItemType[]\r\n): MenuItemType {\r\n  return {\r\n    key,\r\n    icon,\r\n    children,\r\n    label\r\n  } as MenuItemType;\r\n}\r\n\r\n// 将毫秒转化为 YY-MM-DD的格式\r\nexport function formatDate(dateObj: Date) {\r\n  const year = dateObj.getFullYear().toString();\r\n  const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');\r\n  const date = dateObj.getDate().toString().padStart(2, '0');\r\n\r\n  return `${year}-${month}-${date}`;\r\n}\r\n"],"names":["HomeTable","props","_props$showHeader","navigate","useNavigate","showHeader","toUserDetail","useCallback","record","concat","id","columns","title","dataIndex","key","filterMode","render","_jsx","Button","onClick","type","children","_Fragment","Table","dataSource","infoData","rowKey","memo","InterviewWrapper","styled","_templateObject","_taggedTemplateLiteral","LayoutInter","params","useParams","_useState","useState","_useState2","_slicedToArray","dateList","setDateList","_useState3","undefined","_useState4","currId","setCurrId","_useState5","_useState6","queueList","setQueueList","_useState7","isInterview","useEffect","_fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","innerCurrId","innerQuene","innerTimeList","todayInfo","wrap","_context","prev","next","getTodayInfo","Number","direction","then","res","console","log","data","sent","info","push","date","formatDate","Date","getInterviewTimeDirec","list","map","item","startTime","_toConsumableArray","stop","apply","arguments","fetchData","_jsxs","className","Select","defaultValue","defaultActiveFirstOption","style","width","onChange","value","getRecruitTimeInfo","_ref","code","fieldNames","label","options","size","isRefreshing","requests","Request","config","_this","_classCallCheck","instance","this","axios","interceptors","request","use","localStorage","getItem","token","headers","err","response","_response$data","message","Promise","resolve","refleshToken","setItem","forEach","catch","window","location","href","finally","reject","_createClass","_objectSpread","method","baseURL","timeout","login","url","getEnrollData","getSearchData","username","updateInterviewInfo","addNewInterview","deleteInterviewTime","getUserInfoById","password","getAppointSec","getPreRecruitTime","editPreRecruitTime","time","setUserAssess","assess","substrNum","str","slice","icon","dateObj","year","getFullYear","toString","month","getMonth","padStart","getDate"],"sourceRoot":""}