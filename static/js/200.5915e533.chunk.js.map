{"version":3,"file":"static/js/200.5915e533.chunk.js","mappings":"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","sources":["components/home-table/index.tsx","components/layout-interview/style.ts","components/layout-interview/index.tsx","hooks/useThrottle.ts","service/config/config.ts","service/request/request.ts","service/index.ts","service/api.ts","utils/index.ts"],"sourcesContent":["import React, { memo, useCallback } from 'react';\r\nimport type { FC, ReactNode } from 'react';\r\nimport { userEnrollType } from '@/type';\r\nimport { Table, Button } from 'antd';\r\nimport { ColumnsType } from 'antd/es/table';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n  children?: ReactNode;\r\n  infoData: userEnrollType[];\r\n  showHeader?: boolean;\r\n  loading?: boolean;\r\n  pagination?: boolean;\r\n}\r\n\r\nconst HomeTable: FC<IProps> = (props) => {\r\n  const navigate = useNavigate();\r\n  const showHeader = props.showHeader ?? true;\r\n  // 进入用户详情页\r\n  const toUserDetail = useCallback((record: userEnrollType) => {\r\n    navigate(`/detail/${record.id}`);\r\n  }, []);\r\n  const columns: ColumnsType<userEnrollType> = [\r\n    {\r\n      title: '名字',\r\n      dataIndex: 'username',\r\n      key: 'username',\r\n      filterMode: 'tree'\r\n    },\r\n    {\r\n      title: '性别',\r\n      key: 'sex',\r\n      dataIndex: 'sex'\r\n    },\r\n    {\r\n      title: '学号',\r\n      key: 'studentId',\r\n      dataIndex: 'studentId'\r\n    },\r\n    {\r\n      title: '手机号码',\r\n      key: 'phone',\r\n      dataIndex: 'phone'\r\n    },\r\n    {\r\n      title: '学院',\r\n      key: 'college',\r\n      dataIndex: 'college'\r\n    },\r\n    {\r\n      title: '专业',\r\n      key: 'major',\r\n      dataIndex: 'major'\r\n    },\r\n    {\r\n      title: '状态',\r\n      key: 'status',\r\n      dataIndex: 'status'\r\n    },\r\n    {\r\n      title: '进入详情',\r\n      key: 'index',\r\n      render: (record: userEnrollType) => {\r\n        return (\r\n          <Button onClick={() => toUserDetail(record)} type=\"primary\">\r\n            进入详情\r\n          </Button>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n  return (\r\n    <>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={props.infoData}\r\n        rowKey=\"id\"\r\n        showHeader={showHeader}\r\n        loading={props?.loading}\r\n        pagination={false}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(HomeTable);\r\n","import styled from 'styled-components';\r\n\r\nexport const InterviewWrapper = styled.div`\r\n  .btnbox::after {\r\n    display: table;\r\n    clear: both;\r\n    content: '';\r\n  }\r\n  .select-time {\r\n    margin-bottom: 20px;\r\n    font-weight: 700;\r\n  }\r\n  .next-btn {\r\n    margin: 10px 10px 10px 0;\r\n    width: 100px;\r\n    float: right;\r\n  }\r\n  .header {\r\n    width: 100%;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    background-color: #968f8f;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: #ffffff;\r\n    text-align: center;\r\n    margin: 10px 0;\r\n    user-select: none;\r\n    border-radius: 5px;\r\n  }\r\n`;\r\n","import React, { memo, useEffect, useState, useRef } from 'react';\nimport type { FC, ReactNode } from 'react';\nimport { interviewTime, userEnrollType } from '@/type';\nimport { InterviewWrapper } from './style';\nimport { useParams } from 'react-router-dom';\nimport {\n  getInterviewTimeDirec,\n  getIsInterviewByid,\n  getRecruitTimeInfo,\n  nextInterview,\n  pushInterview,\n  setUserStatus\n} from '@/service/api';\nimport { Button, message, Select } from 'antd';\nimport HomeTable from '../home-table';\nimport { useThrottle } from '@/hooks/useThrottle';\nimport { formatDate } from '@/utils';\n// import { ColumnsType } from 'antd/es/table';\n\ninterface LayoutInterProps {\n  children?: ReactNode;\n}\ninterface item {\n  id: number;\n  date: string;\n}\n\nconst LayoutInter: FC<LayoutInterProps> = () => {\n  const params = useParams();\n  const isInterviewId = useRef<undefined | number>(undefined);\n\n  const [dateList, setDateList] = useState<item[]>([]);\n  const [interviewTimeId, setInterviewTimeId] = useState<number | undefined>(\n    undefined\n  );\n  const [queueList, setQueueList] = useState<userEnrollType[]>([]);\n  // 正在面试的队列\n  const [isInterview, setIsInterview] = useState<userEnrollType[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      let innerInterviewTimeId: number | undefined = undefined;\n      let innerTimeList: item[] = [];\n\n      // 将获取过来的面试时间转化为 select组件需要的格式\n      await getInterviewTimeDirec(Number(params.direction)).then((res) => {\n        const listData = res.data as interviewTime[];\n        //   遍历获取的数据，如果当天有面试则存入其中\n        innerTimeList = listData.map((item) => {\n          const date = item.startTime;\n          if (date.split(' ')[0] === formatDate(new Date()))\n            innerInterviewTimeId = item.id as number;\n\n          return { id: item.id as number, date: date };\n        });\n      });\n      innerInterviewTimeId === undefined &&\n        message.warning(\n          `今天${\n            params.direction === '1' ? '前端' : '后端'\n          }暂无面试,请选择其他日期`\n        );\n\n      // 加载数据\n      fetchList(innerInterviewTimeId);\n      // 设置selector的日期信息\n      setDateList(innerTimeList);\n      // 更改selector显示的日期,以确保轮询能正常工作\n      setInterviewTimeId(innerInterviewTimeId);\n      setLoading(false);\n    }\n    fetchData();\n  }, [params]);\n\n  // 开启轮询功能，获取数据\n  useEffect(() => {\n    if (interviewTimeId !== undefined) {\n      const timer = setInterval(() => {\n        fetchList(interviewTimeId, false);\n      }, 4000);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n    // console.log('触发轮询了', interviewTimeId);\n  }, [interviewTimeId]);\n\n  /**\n   *  更新待面试队列和排队队列\n   * @param value 传递过来的面试时间id\n   * @param forLoading 是否要触发加载动画\n   */\n  const fetchList = async (value: number | undefined, forLoading = true) => {\n    // console.log('当前面试时间Id:', interviewTimeId);\n\n    if (typeof value === 'number') {\n      setInterviewTimeId(value);\n      forLoading === true && setLoading(true);\n\n      getRecruitTimeInfo(value).then(({ code, data }) => {\n        code === 200 ? setQueueList(data.info) : setQueueList([]);\n        forLoading === true && setLoading(false);\n      });\n      // 获取正在面试的队列\n      await getIsInterviewByid(value).then((res) => {\n        res.code === 200 ? setIsInterview([res.data]) : setIsInterview([]);\n        res.data !== null\n          ? (isInterviewId.current = res.data.id)\n          : (isInterviewId.current = undefined);\n      });\n    } else {\n      // 如果判断传过来的面试时间id为undefined，则将队列置为空数组\n      setIsInterview([]);\n      setQueueList([]);\n    }\n  };\n\n  const nextOne = useThrottle(async () => {\n    // 如果此时有同学正在面试，则将他的面试状态修改为结束\n    if (isInterviewId.current !== undefined) {\n      await setUserStatus(isInterviewId.current, 6).then((res) => {\n        console.log(res);\n        res.code === 200 && message.success('已结束面试中同学的状态~');\n      });\n    }\n    // 如果此时排队队列没人则刷新数据然后直接返回\n    if (queueList.length === 0) {\n      fetchList(interviewTimeId);\n      return;\n    }\n\n    //   发送请求让下一位同学前来面试\n    nextInterview(interviewTimeId as number).then((res) => {\n      if (res.code === 200) {\n        fetchList(interviewTimeId).then(() => {\n          // 发送消息通知\n          isInterviewId.current !== undefined &&\n            pushInterview(isInterviewId.current).then((res) => {\n              console.log(res);\n              res.code === 200\n                ? message.success('修改成功~')\n                : message.warning('该同学没有授权消息推送，请手动提醒');\n            });\n        });\n      } else {\n        message.error(res.message);\n        console.log(res);\n      }\n    });\n  }, 2000);\n  return (\n    <InterviewWrapper>\n      <div className=\"select-time\">\n        <span>选择日期：</span>\n        <Select\n          value={interviewTimeId}\n          style={{ width: 240 }}\n          onChange={(e) => {\n            fetchList(e, false);\n          }}\n          fieldNames={{\n            label: 'date',\n            value: 'id'\n          }}\n          loading={false}\n          options={dateList}\n        />\n      </div>\n      <div className=\"header\">正在面试 Interviewing</div>\n      <HomeTable\n        infoData={isInterview}\n        showHeader={false}\n        loading={loading}\n        pagination={false}\n      />\n      <div className=\"btnbox\">\n        <Button\n          size=\"large\"\n          className=\"next-btn\"\n          type=\"dashed\"\n          onClick={nextOne}\n        >\n          下一位\n        </Button>\n      </div>\n\n      <div className=\"header\">待面试队列 Waiting</div>\n      <HomeTable infoData={queueList} showHeader={false} loading={loading} />\n    </InterviewWrapper>\n  );\n};\n\nexport default memo(LayoutInter);\n","import { useCallback, useEffect, useRef } from 'react';\r\n\r\ntype fnType = (...args: any) => any;\r\n\r\nexport function useThrottle(fn: fnType, delay: number, dep: any[] = []) {\r\n  const { current } = useRef<{ fn: fnType; timer?: NodeJS.Timeout | null }>({\r\n    fn,\r\n    timer: null\r\n  });\r\n  useEffect(\r\n    function () {\r\n      current.fn = fn;\r\n    },\r\n    [fn]\r\n  );\r\n\r\n  return useCallback(function f(this: any, ...args: any) {\r\n    if (!current.timer) {\r\n      current.timer = setTimeout(() => {\r\n        delete current.timer;\r\n      }, delay);\r\n      current.fn.call(this, ...args);\r\n    }\r\n  }, dep);\r\n}\r\n","export const BASE_URL = 'https://www.yidongmall.cn';\r\n\r\nexport const TIME_OUT = 10000;\r\n","import axios, { AxiosResponse, InternalAxiosRequestConfig } from 'axios';\nimport type { AxiosInstance, AxiosRequestConfig } from 'axios';\nimport type { eAxiosResponse } from './type';\nimport { refleshToken } from '../api';\nimport { TokenFunc } from '@/type';\n\n// 是否正在刷新的标记\nlet isRefreshing = false;\n// 重试队列，每一项将是一个待执行的函数形式\nlet requests: TokenFunc[] = [];\n\nclass Request {\n  // axios 实例\n  instance: AxiosInstance;\n\n  constructor(config: AxiosRequestConfig) {\n    this.instance = axios.create(config);\n    this.instance.interceptors.request.use(\n      (config: InternalAxiosRequestConfig) => {\n        if (localStorage.getItem('token') !== null) {\n          const token = localStorage.getItem('token') as string;\n          config.headers['token'] = `${token}`;\n        } else {\n          console.log('删除 token 了');\n          delete config.headers['Authorization'];\n        }\n        return config;\n      },\n      (err: AxiosResponse) => {\n        return err;\n      }\n    );\n\n    this.instance.interceptors.response.use(\n      (response) => {\n        // 获取code值\n        const { code, message } = response.data;\n        // 执行无痛刷新token\n        if (code === 500 && message === 'token无效!请重新登录!') {\n          const config = response.config;\n          if (!isRefreshing) {\n            isRefreshing = true;\n            return refleshToken()\n              .then((res) => {\n                const { data: token } = res;\n                // 设置token\n                localStorage.setItem('token', token);\n                console.log('token设置完毕');\n                config.headers['token'] = token;\n\n                // 已经刷新了token,将队列里的请求进行重试\n                requests.forEach((item) => item(token));\n                // 将重试队列置空\n                requests = [];\n                return this.instance.request(config);\n              })\n              .catch((res) => {\n                // 如果刷新token无效则直接回到登录页面\n                console.log('reflashtoken error = >', res);\n                window.location.href = '/Login';\n              })\n              .finally(() => {\n                isRefreshing = false;\n              });\n          } else {\n            // 此时代表正在刷新token,返回一个未执行resolve的promise\n            return new Promise((resolve) => {\n              requests.push((token) => {\n                config.headers['token'] = token;\n                // 发送请求\n                resolve(this.instance.request(config));\n              });\n            });\n          }\n        }\n        return response.data;\n      },\n      (err) => {\n        return Promise.reject(err);\n      }\n    );\n  }\n\n  request<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.instance.request<any, T>(config);\n  }\n  get<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'GET' });\n  }\n  post<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'POST' });\n  }\n  delete<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'DELETE' });\n  }\n  put<T = eAxiosResponse>(config: AxiosRequestConfig) {\n    return this.request<T>({ ...config, method: 'PUT' });\n  }\n}\n\nexport default Request;\n","import { BASE_URL, TIME_OUT } from './config/config';\r\nimport Request from './request/request';\r\n\r\nconst request = new Request({\r\n  baseURL: BASE_URL,\r\n  timeout: TIME_OUT\r\n});\r\n\r\nexport default request;\r\n","import { interviewTime, LoginProps, searchUserType } from '@/type';\r\nimport request from '.';\r\n\r\nexport function login(props: LoginProps) {\r\n  return request.post({\r\n    url: '/api/admin/login/pw',\r\n    params: props\r\n  });\r\n}\r\n\r\n// 获取报名情况\r\nexport function getEnrollData(direction: string) {\r\n  return request.get({\r\n    url: `/api/admin/orderBy/${direction}`\r\n  });\r\n}\r\n\r\nexport function getSearchData(params: searchUserType) {\r\n  return request.get({\r\n    url: `/api/admin/getUserInfoByName?username=${params.username}`\r\n  });\r\n}\r\n\r\n// 获取面试时间\r\nexport function getInterviewTime() {\r\n  return request.get({\r\n    url: '/api/admin/getAllTime'\r\n  });\r\n}\r\n// 根据方向获取面试时间\r\nexport function getInterviewTimeDirec(direction: number) {\r\n  return request.get({\r\n    url: `/api/admin/getAllTimeByDir/${direction}`\r\n  });\r\n}\r\n\r\nexport async function refreshToken() {\r\n  const username = window.localStorage.getItem('username') as string;\r\n  const password = window.localStorage.getItem('password') as string;\r\n\r\n  return login({ username, password }).then((res) => {\r\n    return res.data;\r\n  });\r\n}\r\n\r\n// 更改面试基本信息\r\nexport function updateInterviewInfo(props: interviewTime) {\r\n  return request.put({\r\n    url: '/api/admin/interview',\r\n    data: props\r\n  });\r\n}\r\n\r\n// 新增面试时间\r\nexport function addNewInterview(props: interviewTime) {\r\n  return request.post({\r\n    url: '/api/admin/interview',\r\n    data: props\r\n  });\r\n}\r\n\r\n// 删除面试时间\r\nexport function deleteInterviewTime(id: number) {\r\n  return request.delete({\r\n    url: `/api/admin/interview/${id}`\r\n  });\r\n}\r\n\r\n// 获取某个用户的基本信息\r\nexport function getUserInfoById(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/getUserInfoById`,\r\n    params: { id }\r\n  });\r\n}\r\n\r\nexport function refleshToken() {\r\n  const username = localStorage.getItem('username');\r\n  const password = localStorage.getItem('password');\r\n\r\n  return request.post({\r\n    url: '/api/admin/login/pw',\r\n    params: {\r\n      username,\r\n      password\r\n    }\r\n  });\r\n}\r\n\r\n// 查询当前面试时间是否有被预约`\r\nexport function getAppointSec(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/ifSec/${id}`\r\n  });\r\n}\r\n\r\n// 查询多少分钟之前能预约\r\nexport function getPreRecruitTime() {\r\n  return request.get({\r\n    url: `/api/admin/getPreRecruitTime`\r\n  });\r\n}\r\n\r\n/**\r\n * 更改多少分钟之前能预约\r\n * @param time 输入时间\r\n */\r\nexport function editPreRecruitTime(time: number) {\r\n  return request.put({\r\n    url: `/api/admin/changeRecruitTime/${time}`\r\n  });\r\n}\r\n\r\n// 获取该面试时间的信息\r\nexport function getRecruitTimeInfo(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/getThisTime/${id}`\r\n  });\r\n}\r\n\r\n// 填写用户的评价\r\nexport function setUserAssess(id: number, assess: string) {\r\n  return request.put({\r\n    url: `/api/admin/setAssess/${id}`,\r\n    params: {\r\n      assess\r\n    }\r\n  });\r\n}\r\n/**\r\n *  获取当前面试时间的面试情况\r\n * @param  id 面试时间id\r\n */\r\n\r\nexport function getIsInterviewByid(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/getNow/${id}`\r\n  });\r\n}\r\n\r\n/**\r\n * 将下一位排队者改为面试中\r\n * @param  id 面试时间\r\n */\r\nexport function nextInterview(id: number) {\r\n  return request.get({\r\n    url: `/api/admin/getNext/${id}`\r\n  });\r\n}\r\n\r\n/**\r\n *发送消息提醒面试\r\n * @param  id 用户id\r\n */\r\nexport function pushInterview(id: number) {\r\n  return request.post({\r\n    url: `/api/admin/push/interview/${id}`\r\n  });\r\n}\r\n\r\n/**\r\n * 修改用户状态\r\n * @param id 用户id\r\n * @param status 需要修改的用户状态\r\n * @returns\r\n */\r\nexport function setUserStatus(id: number, status: number) {\r\n  return request.put({\r\n    url: `/api/admin/setStatus/${id}/${status}`\r\n  });\r\n}\r\n/**\r\n *\r\n * @param isDisplay 是否展示报名页\r\n * @param message 报名页返回内容\r\n */\r\nexport function changeDisplay(isDisplay: boolean, message = '暂不支持报名') {\r\n  return request.put({\r\n    url: `/api/admin/page/display`,\r\n    data: {\r\n      isDisplay,\r\n      message\r\n    }\r\n  });\r\n}\r\n\r\nexport function getDisplay() {\r\n  return request.get({\r\n    url: `/api/recruit/display`\r\n  });\r\n}\r\n","import { MenuItemType } from '@/type';\r\nimport React from 'react';\r\n\r\n// 截取字符串，并将其转为数字\r\nexport function substrNum(str: string): number {\r\n  return Number(str.slice(-1));\r\n}\r\n\r\n// 封装一下menuItem添加数据的方法\r\nexport function getItem(\r\n  label: React.ReactNode,\r\n  key: React.Key,\r\n  icon?: React.ReactNode,\r\n  children?: MenuItemType[]\r\n): MenuItemType {\r\n  return {\r\n    key,\r\n    icon,\r\n    children,\r\n    label\r\n  } as MenuItemType;\r\n}\r\n\r\n// 将毫秒转化为 YY-MM-DD的格式\r\nexport function formatDate(dateObj: Date) {\r\n  const year = dateObj.getFullYear().toString();\r\n  const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');\r\n  const date = dateObj.getDate().toString().padStart(2, '0');\r\n\r\n  return `${year}-${month}-${date}`;\r\n}\r\n\r\n// 翻转map数组的key和value\r\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K> {\r\n  const reverse = new Map<V, K>();\r\n  for (const [key, value] of map) {\r\n    reverse.set(value, key);\r\n  }\r\n  return reverse;\r\n}\r\n"],"names":["HomeTable","props","_props$showHeader","navigate","useNavigate","showHeader","toUserDetail","useCallback","record","concat","id","columns","title","dataIndex","key","filterMode","render","_jsx","Button","onClick","type","children","_Fragment","Table","dataSource","infoData","rowKey","loading","pagination","memo","InterviewWrapper","styled","_templateObject","_taggedTemplateLiteral","LayoutInter","params","useParams","isInterviewId","useRef","undefined","_useState","useState","_useState2","_slicedToArray","dateList","setDateList","_useState3","_useState4","interviewTimeId","setInterviewTimeId","_useState5","_useState6","queueList","setQueueList","_useState7","_useState8","isInterview","setIsInterview","_useState9","_useState10","setLoading","useEffect","_fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","innerInterviewTimeId","innerTimeList","wrap","_context","prev","next","getInterviewTimeDirec","Number","direction","then","res","listData","data","map","item","date","startTime","split","formatDate","Date","message","fetchList","stop","apply","arguments","fetchData","timer","setInterval","clearInterval","_ref","_callee2","value","forLoading","_args2","_context2","length","getRecruitTimeInfo","_ref2","code","info","getIsInterviewByid","current","_x","nextOne","useThrottle","_callee3","_context3","setUserStatus","console","log","abrupt","nextInterview","pushInterview","_jsxs","className","Select","style","width","onChange","e","fieldNames","label","options","size","fn","delay","dep","_current$fn","setTimeout","_len","args","Array","_key","call","this","isRefreshing","requests","Request","config","_this","_classCallCheck","instance","axios","interceptors","request","use","localStorage","getItem","token","headers","err","response","_response$data","Promise","resolve","push","refleshToken","setItem","forEach","catch","window","location","href","finally","reject","_createClass","_objectSpread","method","baseURL","timeout","login","url","getEnrollData","getSearchData","username","updateInterviewInfo","addNewInterview","deleteInterviewTime","getUserInfoById","password","getAppointSec","getPreRecruitTime","editPreRecruitTime","time","setUserAssess","assess","status","changeDisplay","isDisplay","getDisplay","substrNum","str","slice","icon","dateObj","year","getFullYear","toString","month","getMonth","padStart","getDate","reverseMap","_step","reverse","Map","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","set","f"],"sourceRoot":""}